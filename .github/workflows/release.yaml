---
name: Generate `jq` Javascript and WASM artifacts

run-name: 'release `jq` (branch: ${{ github.ref }})'

on:
  workflow_call:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: emscripten-core/emsdk
          path: emsdk

      # https://emscripten.org/docs/getting_started/downloads.html#installation-instructions-using-the-emsdk-recommended
      - name: 'Install build requirement: `emscripten`'
        run: |
          ./emsdk install latest
          ./emsdk activate latest

          # DEBUG
          echo "old_path=$PATH"

          source ./emsdk_env.sh

          # DEBUG
          echo "new_path=$PATH"

          #git diff --word-diff --word-diff-regex=. --no-index $old_path_file $new_path_file

          echo $PATH > $GITHUB_PATH
        working-directory: emsdk

      - name: 'Verify build requirement: `emscripten`'
        run: |
          emcc -v

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          path: main

      - name: 'Prep the `jq` module'
        run: |
          git submodule update --init
          echo '::group::`autoreconf -i`'
          autoreconf -i
          echo '::endgroup::'
          echo '::group::`emconfigure ./configure...`'
          emconfigure ./configure --with-oniguruma=builtinrun
          echo '::endgroup::'

          emcc_cflags='-sMODULARIZE=1 -sEXPORT_NAME=jq -sEXIT_RUNTIME=0'
          emcc_cflags+=' -sALLOW_MEMORY_GROWTH=1'
          emcc_cflags+=' -sUSE_PTHREADS=0'
          emcc_cflags+=" -sEXPORTED_RUNTIME_METHODS='[\"callMain\"]'"
          emcc_cflags+=" -sEXPORTED_FUNCTIONS='[\"_main\"]'"

          main_repo_path=$(dirname $(pwd))
          emcc_cflags+=" --pre-js $main_repo_path/pre.js"
          emcc_cflags+=" --post-js $main_repo_path/post.js"

          echo "EMCC_CFLAG=$emcc_cflags"
          echo '::group::`emmake make...`'
          EMCC_CFLAGS="$emcc_cflags" emmake make LDFLAGS=-all-static
          echo '::endgroup::'

          cp jq jq.js
        working-directory: main/jq

      - uses: actions/upload-artifact@v4
        with:
          name: output
          path: |
            main/jq/jq.js
            main/jq/jq.wasm

      - name: '[DEBUG] after build'
        run: |
          echo '::group::`ls -AR`...'
          ls -AR
          echo '::endgroup::'
          file jq.js
          head jq.js
        working-directory: main/jq

---
name: release

run-name: 'release `jq` (branch: ${{ github.ref }})'

on:
  workflow_call:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: emscripten-core/emsdk
          path: emsdk

      - name: 'Install build requirement: `emscripten`'
        run: |
          ./emsdk install latest
          ./emsdk activate latest

          # DEBUG
          echo "old_path=$PATH"

          source ./emsdk_env.sh

          # DEBUG
          echo "new_path=$PATH"

          #git diff --word-diff --word-diff-regex=. --no-index $old_path_file $new_path_file

          echo $PATH > $GITHUB_PATH
        working-directory: emsdk

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          path: main

      - name: 'Verify build requirement: `emscripten`'
        run: |
          emcc -v

      - name: 'Prep the `jq` module'
        run: |
          git submodule update --init
          autoreconf -i
          emconfigure ./configure --with-oniguruma=builtinrun

          emcc_cflags=' -sMODULARIZE=1 -sEXPORT_NAME=jq -sEXIT_RUNTIME=0'
          emcc_cflags=" -sEXPORTED_RUNTIME_METHODS='[\"callMain\"]"
          emcc_cflags=" -sEXPORTED_FUNCTIONS='[\"_main\"]'"
          emcc_cflags=' --pre-js ../pre.js --post-js ../post.js'
          echo "EMCC_CFLAG=Semcc_cflags"
          EMCC_CFLAGS="$emcc_cflags" emmake make
          emmake make LDFLAGS=-all-static

          #cp jq jq.o
        working-directory: main/jq

      #- name: 'Try to do the thing with the `jq` module'
      #  run: |
      #    emcc jq.o -o jq.js -s ERROR_ON_UNDEFINED_SYMBOLS=0
      #  working-directory: main/jq

      - name: DEBUG
        run: |
          ls -AR
          type jq
          head jq
        working-directory: main/jq

      - name: Create test data
        id: test-data
        run: |
          tmpfile=$(mktemp)
          echo '{"a":"b"}' > $tmpfile
          echo "json=$tmpfile" | tee -a $GITHUB_OUTPUT

      - env:
          JSON_FILE: ${{ steps.test-data.outputs.json }}
        run: |
          node jq.js '.a' $JSON_FILE
        working-directory: main/jq
